#
# $Id: Jamfile.jam 2670 2011-04-28 19:45:46Z chambm $
#
#
# Original author: Darren Kessner <darren@proteowizard.org>
#
# Copyright 2008 Spielberg Family Center for Applied Proteomics
#   Cedars-Sinai Medical Center, Los Angeles, California  90048
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#


import modules ;
import path ;


path-constant API_PATH : . ;


if [ modules.peek : NT ]
{

import os common ;
local ProgramFiles = [ os.environ ProgramFiles ] ;
ProgramFiles ?= "C:\\Program Files" ;
local MSFileReader = "$(ProgramFiles)\\Thermo\\MSFileReader" ;
if ! --i-agree-to-the-vendor-licenses in [ modules.peek : ARGV ]
{
    # ignore vendor DLLs even if they're available
    SHELL "copy \"$(API_PATH)\\MSFileReader.XRawfile2.SxS.manifest.dummy\" \"$(API_PATH)\\MSFileReader.XRawfile2.SxS.manifest\"" ;
    RESCAN ;
}
else
{
    if [ path.exists $(API_PATH)\\MSFileReader.XRawfile2.dll ]
    {
        .hasDLLs = true ;
    }

    if ! $(.hasDLLs) && [ path.exists $(MSFileReader)\\XRawfile2.dll ]
    {
        .hasDLLs = true ;
        local destination = [ path.native $(API_PATH) ] ;
        echo "Copying MSFileReader DLLs from \"$(MSFileReader)\" to \"$(destination)\"." ;
        echo [ SHELL "copy \"$(MSFileReader)\\XRawfile2.dll \" \"$(destination)\\MSFileReader.XRawfile2.dll" ] ;
        echo [ SHELL "copy \"$(MSFileReader)\\fileio.dll\" \"$(destination)\"" ] ;
        echo [ SHELL "copy \"$(MSFileReader)\\fregistry.dll\" \"$(destination)\"" ] ;
        RESCAN ;
    }
}

rule vendor-api-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) &&
       [ path.exists $(API_PATH)/XRawFile2.tlh ]
    {
        result += <source>RawFile.cpp ;
        result += <source>RawFileValues.cpp ;
    }
    return $(result) [ vendor-api-usage-requirements $(properties) ] ;
}

lib shlwapi : : <name>shlwapi ; # for PathIsNetworkPath

rule vendor-api-usage-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties)
    {
        result += <define>PWIZ_READER_THERMO ;
        if $(.hasDLLs)
        {
            result += <manifest-dependency>$(API_PATH)/MSFileReader.XRawfile2.dll ;
            result += <assembly-dependency>$(API_PATH)/MSFileReader.XRawfile2.dll ;
            result += <assembly-dependency>$(API_PATH)/MSFileReader.XRawfile2.SxS.manifest ;
            result += <assembly-dependency>$(API_PATH)/fregistry.dll ;
            result += <assembly-dependency>$(API_PATH)/fileio.dll ;
            result += <assembly-dependency>$(API_PATH)/EULA.MSFileReader ;
            result += <library>shlwapi ;
        }
    }
    return $(result) ;
}

lib pwiz_vendor_api_thermo
    : # sources
        ScanFilter.cpp
    : # requirements
        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
        <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc
        <library>/ext/boost//thread
        <conditional>@vendor-api-requirements
        <conditional>@msvc-requirement
        <address-model>64:<build>no
    : # default-build
    : # usage-requirements
        <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc
        <library>/ext/boost//thread
        <conditional>@vendor-api-usage-requirements
    ;

unit-test-if-exists ScanFilterTest
    : ScanFilterTest.cpp
      pwiz_vendor_api_thermo
    : <conditional>@msvc-requirement
      <address-model>64:<build>no
    ;

# a test utility, not a unit test
exe RawFileTest
    : RawFileTest.cpp
      pwiz_vendor_api_thermo
    ;

explicit RawFileTest ;


install install_pwiz_vendor_api_thermo
    : [ path.glob $(API_PATH) : *.dll *.manifest EULA.* ]
    ;

explicit install_pwiz_vendor_api_thermo ;

install install_pwiz_vendor_api_thermo_eula
    : [ path.glob $(API_PATH) : EULA.* ]
    ;

explicit install_pwiz_vendor_api_thermo_eula ;

install install_pwiz_vendor_api_thermo_mfc
    : [ path.glob $(API_PATH)/Microsoft.VC90.MFC : *.dll *.manifest ]
    ;

explicit install_pwiz_vendor_api_thermo_mfc ;
}
